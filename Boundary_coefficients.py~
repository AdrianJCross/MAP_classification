import sys
import math
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import matplotlib.lines as mlines
from mpl_toolkits.mplot3d import Axes3D
from mpl_toolkits import mplot3d

pi= 3.14159265359
def gaussian_pdf(x,mu,sigma): #calculates p(x|mu,sigma) for x1 and x2
    x=x.reshape(-1,1)
    mu=mu.reshape(-1,1)
    p,_=sigma.shape
    
    sigma_inv=np.linalg.inv(sigma)#determinant of sigma
    a=np.sqrt((2*pi)**p*np.linalg.det(sigma)) #first part of gaussian
    b=-0.5*((x-mu).T @ sigma_inv @ (x-mu)) #second part of gaussian
    return float (1./a)*np.exp(b)

def input_data(filename):
    data = pd.read_csv(filename, sep='\s+', header = 0)
    return data

def boundary_1_a(mu_0,mu_1, Sigma_c0, Sigma_c1,P_w0=0.5,P_w1=0.5):
    xcoeff=-(mu_0[0]-mu_1[0])/(mu_0[1]-mu_1[1])
    return xcoeff

def boundary_1_b(mu_0,mu_1, sigma_c0, sigma_c1,P_w0=0.5,P_w1=0.5):
    sigma_c0_b1=([sigma_c0[0,0],0],[0,sigma_c0[1,1]])
    sigma_c1_b1=([sigma_c1[0,0],0],[0,sigma_c1[1,1]])
    sigma_sq=0.5*(np.linalg.det(sigma_c0_b1)+np.linalg.det(sigma_c1_b1))
    c0=0.5*(mu_0+mu_1)-(mu_0-mu_1)*(sigma_sq/(np.linalg.norm(mu_0-mu_1))**2)*np.log(P_w0/P_w1)
    y_intercept=c0[0]*(mu_0[0]-mu_1[0])+c0[1]*(mu_0[1]-mu_1[1])
    return y_intercept

def boundary_2_a(mu_0,mu_1, sigma_c0, sigma_c1,P_w0=0.5,P_w1=0.5):
    sigma=0.5*(sigma_c0+sigma_c1)
    w_x=sigma[0,0]*(mu_0[0]-mu_1[0])+sigma[0,1]*(mu_0[1]-mu_1[1])
    w_y=sigma[1,1]*(mu_0[1]-mu_1[1])+sigma[1,0]*(mu_0[0]-mu_1[0])
    return -w_x/w_y

def boundary_2_b(mu_0,mu_1, Sigma_c0, Sigma_c1,P_w0=0.5,P_w1=0.5):
    sigma=0.5*(Sigma_c0+Sigma_c1)
    w_x=sigma[0,0]*(mu_0[0]-mu_1[0])+sigma[0,1]*(mu_0[1]-mu_1[1])
    w_y=sigma[1,1]*(mu_0[1]-mu_1[1])+sigma[1,0]*(mu_0[0]-mu_1[0])
    m_minus=mu_0-mu_1
    factor=1/((np.transpose(m_minus))@(np.linalg.inv(sigma))@m_minus)
    c0=0.5*(mu_0+mu_1)-m_minus*factor*np.log(P_w0/P_w1)
    y_intercept=c0[1]+c0[0]*(w_x/w_y)
    y_intercept=(w_x/w_y)*c0[0]
    return y_intercept

def boundary_3_a(x, mu_0,mu_1, sigma_c0,sigma_c1, P_w0=0.5,P_w1=0.5):
    E=np.linalg.inv(sigma_c0)-np.linalg.inv(sigma_c1)
    M=np.transpose(np.linalg.inv(sigma_c0)@mu_0)-np.transpose(np.linalg.inv(sigma_c1)@mu_1)
    w_0=-0.5*np.transpose(mu_0)@np.linalg.inv(sigma_c0)@mu_0-0.5*np.log(np.linalg.det(sigma_c0))+np.log(P_w0)
    w_1=-0.5*np.transpose(mu_1)@np.linalg.inv(sigma_c1)@mu_1-0.5*np.log(np.linalg.det(sigma_c1))+np.log(P_w1)
  #  a=8*M[0]*E[1,1]*x-4*E[0,0]*E[1,1]*(x**2)+((E[1,0]+E[0,1])**2)*(x**2)-4*(E[1,0]+E[0,1])*M[1]*x+8*E[1,1]*(w_0-w_1)+4*(M[1]**2)
   # b=-(E[1,0]+E[0,1])+2*M[1]
    #print(np.sqrt(np.absolute(a))+b)/(2*E[1,1])
    #return -(np.sqrt(np.absolute(a))+b)/(2*E[1,1])
    print((2/E[1,1])*(M[0]*x-0.5*E[0,0]*x**2+w_0-w_1))
    print(M[0])
    print(E[1,1])
    return np.sqrt((2/E[1,1])*(M[0]*x-0.5*E[0,0]*x**2+w_0-w_1))




data_tr=input_data('synth.tr')
data_tr_c0=data_tr.loc[data_tr.yc==0]# splits data into 2 classes
data_tr_c1=data_tr.loc[data_tr.yc==1]
data_tr_c1=data_tr_c1.reset_index()

n_c0=count_row=data_tr_c0.shape[0]#total number of data points calculation
n_c1=count_row=data_tr_c1.shape[0]
mu_c0_x=(1/n_c0)*data_tr_c0['xs'].sum()#MLE for mu calculation
mu_c0_y=(1/n_c0)*data_tr_c0['ys'].sum()
mu_c1_x=(1/n_c1)*data_tr_c1['xs'].sum()
mu_c1_y=(1/n_c1)*data_tr_c1['ys'].sum()
mu_c0=np.array([mu_c0_x,mu_c0_y])
mu_c1=np.array([mu_c1_x,mu_c1_y])
sigma_c0_xx=math.sqrt((1/n_c0)*((data_tr_c0['xs']-mu_c0_x)**2).sum())#MLE for sigma calculation
sigma_c0_yy=math.sqrt((1/n_c0)*((data_tr_c0['ys']-mu_c0_y)**2).sum())
sigma_c0_xy=math.sqrt(abs((1/n_c0)*((data_tr_c0['xs']-mu_c0_x)*(data_tr_c0['ys']-mu_c0_y)).sum()))
sigma_c0_yx=math.sqrt(abs((1/n_c0)*((data_tr_c0['ys']-mu_c0_y)*(data_tr_c0['xs']-mu_c0_x)).sum()))
sigma_c1_xx=math.sqrt((1/n_c1)*((data_tr_c1['xs']-mu_c1_x)**2).sum())
sigma_c1_yy=math.sqrt((1/n_c1)*((data_tr_c1['ys']-mu_c1_y)**2).sum())
sigma_c1_xy=math.sqrt(abs((1/n_c1)*((data_tr_c1['xs']-mu_c1_x)*(data_tr_c1['ys']-mu_c1_y)).sum()))
sigma_c1_yx=math.sqrt(abs((1/n_c1)*((data_tr_c1['ys']-mu_c1_y)*(data_tr_c1['xs']-mu_c1_x)).sum()))
sigma_c0=np.array([[ sigma_c0_xx , sigma_c0_xy], [sigma_c0_yx,  sigma_c0_yy]])
sigma_c1=np.array([[ sigma_c1_xx , sigma_c1_xy], [sigma_c1_yx,  sigma_c1_yy]])
x=np.arange(-1.5,1.5,0.01)

a_bound_1=boundary_1_a(mu_c0,mu_c1, sigma_c0, sigma_c1,P_w0=0.5,P_w1=0.5)
b_bound_1=boundary_1_b(mu_c0,mu_c1, sigma_c0, sigma_c1,P_w0=0.5,P_w1=0.5)

a_bound_2=boundary_2_a(mu_c0,mu_c1, sigma_c0, sigma_c1,P_w0=0.5,P_w1=0.5)
b_bound_2=boundary_2_b(mu_c0,mu_c1, sigma_c0, sigma_c1,P_w0=0.5,P_w1=0.5)

print(sigma_c1)
a_bound_3=boundary_3_a(x,mu_c0,mu_c1, sigma_c0, sigma_c1,P_w0=0.5,P_w1=0.5)
#b_bound_2=boundary_2_b(mu_c0,mu_c1, sigma_c0, sigma_c1,P_w0=0.5,P_w1=0.5)

#print(a_bound_2)
#print(b_bound_2)
plt.plot(x,a_bound_1*x+b_bound_1,c='DarkGreen',linestyle='--')
plt.plot(x,a_bound_2*x+b_bound_2,c='DarkGreen',linestyle='-')
plt.plot(x,a_bound_3,c='DarkGreen',linestyle='-.')
plt.scatter(data_tr_c0['xs'],data_tr_c0['ys'],c='DarkBlue')# plot data
plt.scatter(data_tr_c1['xs'],data_tr_c1['ys'],c='DarkRed')
plt.xlabel('x')
plt.ylabel('y')
plt.xlim(-1.5,1.5)
plt.ylim(-1,1.5)
c_1_leg= mlines.Line2D([], [], color='DarkBlue', marker='o',markersize=5)
c_2_leg= mlines.Line2D([], [], color='DarkRed', marker='o',markersize=5)
b_1_leg= mlines.Line2D([], [], color='DarkGreen', linestyle='--',markersize=5)
b_2_leg= mlines.Line2D([], [], color='DarkGreen',linestyle='-',markersize=5)
b_3_leg= mlines.Line2D([], [], color='DarkGreen',linestyle='-.',markersize=5)
plt.legend((c_1_leg,c_2_leg,b_1_leg,b_2_leg,b_3_leg),('class 0', 'class 1','case 1','case 2', 'case 3'))
plt.title('synth.tr data with decision rules')
plt.show()

